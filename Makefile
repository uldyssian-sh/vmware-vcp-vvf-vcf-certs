.PHONY: help install test lint format security clean build docker run docs\n\n# Default target\nhelp:\n\t@echo \"VMware VCP VVF VCF Certificate Management - Available Commands:\"\n\t@echo \"\"\n\t@echo \"Development:\"\n\t@echo \"  install     Install dependencies\"\n\t@echo \"  test        Run test suite\"\n\t@echo \"  lint        Run code linting\"\n\t@echo \"  format      Format code\"\n\t@echo \"  security    Run security checks\"\n\t@echo \"\"\n\t@echo \"Build & Deploy:\"\n\t@echo \"  build       Build package\"\n\t@echo \"  docker      Build Docker image\"\n\t@echo \"  run         Run application\"\n\t@echo \"\"\n\t@echo \"Documentation:\"\n\t@echo \"  docs        Generate documentation\"\n\t@echo \"\"\n\t@echo \"Maintenance:\"\n\t@echo \"  clean       Clean build artifacts\"\n\t@echo \"  update      Update dependencies\"\n\ninstall:\n\t@echo \"Installing dependencies...\"\n\tpip install --upgrade pip\n\tpip install -r requirements.txt\n\tpip install -e .\n\ntest:\n\t@echo \"Running test suite...\"\n\tpytest tests/ -v --cov=. --cov-report=html --cov-report=term\n\ntest-fast:\n\t@echo \"Running fast tests...\"\n\tpytest tests/ -x -v\n\nlint:\n\t@echo \"Running code linting...\"\n\tflake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n\tmypy . --ignore-missing-imports\n\nformat:\n\t@echo \"Formatting code...\"\n\tblack .\n\tisort .\n\nformat-check:\n\t@echo \"Checking code format...\"\n\tblack --check --diff .\n\tisort --check-only --diff .\n\nsecurity:\n\t@echo \"Running security checks...\"\n\tbandit -r . -f json -o bandit-report.json\n\tsafety check\n\tpip-audit\n\nbuild:\n\t@echo \"Building package...\"\n\tpython -m build\n\ndocker:\n\t@echo \"Building Docker image...\"\n\tdocker build -t vmware-certs:latest .\n\ndocker-run:\n\t@echo \"Running Docker container...\"\n\tdocker run --rm -v $(PWD)/config:/app/config vmware-certs:latest\n\nrun:\n\t@echo \"Running application...\"\n\tpython main.py run\n\nrun-dev:\n\t@echo \"Running application in development mode...\"\n\tDEBUG=true python main.py run\n\ndocs:\n\t@echo \"Generating documentation...\"\n\tmkdocs build\n\ndocs-serve:\n\t@echo \"Serving documentation locally...\"\n\tmkdocs serve\n\nclean:\n\t@echo \"Cleaning build artifacts...\"\n\trm -rf build/\n\trm -rf dist/\n\trm -rf *.egg-info/\n\trm -rf .pytest_cache/\n\trm -rf htmlcov/\n\trm -rf .coverage\n\trm -rf .mypy_cache/\n\trm -rf __pycache__/\n\tfind . -type d -name \"__pycache__\" -exec rm -rf {} +\n\tfind . -type f -name \"*.pyc\" -delete\n\tupdate:\n\t@echo \"Updating dependencies...\"\n\tpip install --upgrade pip\n\tpip install --upgrade -r requirements.txt\n\nci-setup:\n\t@echo \"Setting up CI environment...\"\n\tpip install --upgrade pip\n\tpip install -r requirements.txt\n\tpip install pytest pytest-cov black flake8 mypy bandit safety\n\nci-test: ci-setup format-check lint security test\n\t@echo \"CI pipeline completed successfully\"\n\nrelease-check:\n\t@echo \"Checking release readiness...\"\n\t@python -c \"import main; print(f'Version: {main.VMwareCertManager().version}')\"\n\t@git status --porcelain | grep -q . && echo \"Working directory not clean\" && exit 1 || echo \"Working directory clean\"\n\nvalidate:\n\t@echo \"Running certificate validation...\"\n\tpython main.py validate\n\nrenew:\n\t@echo \"Running certificate renewal...\"\n\tpython main.py renew\n\nbackup:\n\t@echo \"Running certificate backup...\"\n\tpython main.py backup\n\nall: clean install format lint security test build\n\t@echo \"Full build pipeline completed successfully\"