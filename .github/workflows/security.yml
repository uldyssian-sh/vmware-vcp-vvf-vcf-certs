name: Security Audit

on:
  schedule:
    - cron: '0 3 * * *'  # Daily at 3 AM
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
      
      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
      
      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-security-reports
          path: |
            safety-report.json
            pip-audit-report.json

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep
      
      - name: Run Bandit security linter
        run: |
          bandit -r . -f json -o bandit-security-report.json || true
      
      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true
      
      - name: Upload code security reports
        uses: actions/upload-artifact@v3
        with:
          name: code-security-reports
          path: |
            bandit-security-report.json
            semgrep-report.json

  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t vmware-certs-security:latest .
      
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vmware-certs-security:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-licenses
      
      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=license-report.json
      
      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-compliance-report
          path: license-report.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, container-security-scan, secrets-scan, license-compliance]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate security summary
        run: |
          echo "# Security Audit Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- Code Security Scan: ${{ needs.code-security-scan.result }}" >> security-summary.md
          echo "- Container Security Scan: ${{ needs.container-security-scan.result }}" >> security-summary.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
          echo "- License Compliance: ${{ needs.license-compliance.result }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
      
      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-summary
          path: security-summary.md